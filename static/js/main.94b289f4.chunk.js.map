{"version":3,"sources":["components/Navbar.tsx","components/Filter.tsx","components/Book.tsx","components/Books.tsx","App.tsx","index.tsx"],"names":["Navbar","currentTab","changeTab","toRead","inProgress","done","toReadClassName","inProgressClassName","doneClassName","className","onClick","Filter","tags","removeTag","clearTags","size","tagsJSX","Array","from","map","tag","key","Book","tab","book","moveBook","addTag","id","author","title","callback","createMoveBookButton","index","description","tagIndex","Books","booksRef","React","createRef","filteredBooksCount","state","countToDisplay","filterBooks","props","books","booksInProgressIds","booksDoneIds","filter","moved","has","every","includes","window","onscroll","current","getBoundingClientRect","bottom","innerHeight","setState","this","filteredBooks","length","booksJSX","slice","ref","Component","App","allBooks","Set","newUrl","URL","location","href","searchParams","set","history","pushState","toString","add","join","delete","startBook","movedBooksIds","localStorage","setItem","JSON","stringify","finishBook","resetBook","fetch","then","response","json","data","items","forEach","getItem","movedBookIds","parse","movedId","find","search","urlParams","URLSearchParams","get","split","booksInProgress","booksDone","toReadCount","inProgressCount","doneCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94b289f4.chunk.js","sourcesContent":["import React from 'react'\nimport { ITab } from '../types'\n\ninterface IProps {\n   currentTab: ITab,\n   changeTab: (tab: ITab) => void\n   toRead: number\n   inProgress: number\n   done: number\n}\n\nexport const Navbar: React.FC<IProps> = ({ currentTab, changeTab, toRead, inProgress, done }) => {\n   const toReadClassName = 'navbar__item' + (currentTab === 'toread' ? ' navbar__item_active' : '')\n   const inProgressClassName = 'navbar__item' + (currentTab === 'inprogress' ? ' navbar__item_active' : '')\n   const doneClassName = 'navbar__item' + (currentTab === 'done' ? ' navbar__item_active' : '')\n\n   return (\n      <nav className=\"navbar\">\n         <div\n            className={toReadClassName}\n            onClick={() => changeTab('toread')}\n         >\n            To read <span className=\"navbar__count\">({toRead})</span>\n         </div>\n\n         <div\n            className={inProgressClassName}\n            onClick={() => changeTab('inprogress')}\n         >\n            In progress <span className=\"navbar__count\">({inProgress})</span>\n         </div>\n\n         <div\n            className={doneClassName}\n            onClick={() => changeTab('done')}\n         >\n            Done <span className=\"navbar__count\">({done})</span>\n         </div>\n      </nav>\n   )\n}","import React from 'react'\n\ninterface IProps {\n   tags: Set<string>\n   removeTag: (tag: string) => void\n   clearTags: () => void\n}\n\nexport const Filter: React.FC<IProps> = ({ tags, removeTag, clearTags }) => {\n   if (!tags.size) return null\n\n   const tagsJSX = Array.from(tags).map((tag) => (\n      <span className=\"filter__tag\" onClick={() => removeTag(tag)} key={tag}>\n         #{tag}\n      </span>)\n   )\n\n   return (\n      <div className=\"filter\">\n         <span>Filtered by tags: </span>\n         {tagsJSX}\n         (<button className=\"filter__clear\" onClick={clearTags}>clear</button>)\n      </div>\n   )\n}","import React from 'react'\nimport { IBook, ITab } from '../types'\n\n\ninterface IProps {\n   tab: ITab\n   book: IBook\n   moveBook: (index: number) => void\n   addTag: (tag: string) => void\n}\n\nexport const Book: React.FC<IProps> = ({ tab, book, moveBook, addTag }) => (\n   <div className=\"book\" key={book.id}>\n      <h3 className=\"book__author\">{book.author}</h3>\n      <div className=\"book__title-and-button\">\n         <h2 className=\"book__title\">{book.title}</h2>\n         {createMoveBookButton(tab, () => moveBook(book.index))}\n      </div>\n      <p className=\"book__description\">{book.description}</p>\n\n      {book.tags.map((tag, tagIndex) => (\n         <span\n            className=\"book__tag\"\n            key={tagIndex}\n            onClick={() => addTag(tag)}\n         >\n            #{tag}\n         </span>\n      ))}\n   </div>\n)\n\n\nfunction createMoveBookButton(tab: ITab, callback: () => void): JSX.Element {\n   if (tab === 'toread') {\n      return (\n         <button\n            className=\"book__move-button\"\n            onClick={callback}\n         >\n         <span className=\"book__move-button-text\">start reading</span> →</button>\n      )\n   }\n\n   if (tab === 'inprogress') {\n      return (\n         <button\n            className=\"book__move-button\"\n            onClick={callback}\n         >\n         <span className=\"book__move-button-text\">finish reading</span> →</button>\n      )\n   }\n\n   return (\n      <button\n         className=\"book__move-button\"\n         onClick={callback}\n      >\n      <span className=\"book__move-button-text\">return in \"to read\"</span> ↵</button>\n   )\n}","import React from 'react'\nimport { IBook, ITab } from '../types'\nimport { Book } from './Book'\n\n\ninterface IProps {\n   tab: ITab,\n   books: IBook[],\n   tags: Set<string>,\n   addTag: (tag: string) => void\n   moveBook: (index: number) => void\n   booksInProgressIds: Set<number>,\n   booksDoneIds: Set<number>,\n}\n\ninterface IState {\n   countToDisplay: number\n}\n\n\nexport class Books extends React.Component<IProps, IState> {\n   booksRef = React.createRef<HTMLDivElement>()\n   filteredBooksCount = 0\n\n   state = {\n      countToDisplay: 50\n   }\n\n\n   componentDidMount() {\n      window.onscroll = () => {\n         const books = this.booksRef.current as unknown as HTMLElement\n\n         if (books) {\n            const toBooksBottom = books.getBoundingClientRect().bottom - window.innerHeight\n            if (toBooksBottom < 200 && this.filteredBooksCount > this.state.countToDisplay) {\n               this.setState({ countToDisplay: this.state.countToDisplay + 50 })\n            }\n         }\n      }\n   }\n\n   componentWillUnmount() {\n      window.onscroll = null\n   }\n\n\n   filterBooks = (): IBook[] => {\n      const { tab, books, tags, booksInProgressIds, booksDoneIds } = this.props\n      return books.filter((book, index) => (\n         (\n            (tab === 'toread' && !book.moved)\n            || (tab === 'inprogress' && booksInProgressIds.has(index))\n            || (tab === 'done' && booksDoneIds.has(index))\n         )\n         &&\n         (!tags.size || Array.from(tags).every((tag) => book.tags.includes(tag)))\n      ))\n   }\n\n\n   render() {\n      const { tab, addTag, moveBook, books } = this.props\n\n      const filteredBooks = this.filterBooks()\n      this.filteredBooksCount = filteredBooks.length\n\n      const booksJSX = filteredBooks\n         .slice(0, this.state.countToDisplay)\n         .map((book) => <Book tab={tab} book={book} moveBook={moveBook} addTag={addTag} key={book.id} />)\n\n\n      if (!booksJSX.length) {\n         return <div className=\"books-placeholder\">{books.length ? 'List is empty' : 'Loading...'}</div>\n      }\n      return (\n         <div ref={this.booksRef}>\n            {booksJSX}\n         </div>\n      )\n   }\n}","import React from 'react';\n\nimport 'normalize.css'\nimport './styles/style.scss'\n\nimport { IBook, ITab } from './types';\nimport { Navbar } from './components/Navbar';\nimport { Filter } from './components/Filter';\nimport { Books } from './components/Books';\n\n\ninterface IState {\n   allBooks: IBook[],\n   booksInProgressIds: Set<number>,\n   booksDoneIds: Set<number>,\n   currentTab: ITab,\n   tags: Set<string>\n}\n\nclass App extends React.Component<{}, IState> {\n   state: IState = {\n      allBooks: [],\n      booksInProgressIds: new Set(),\n      booksDoneIds: new Set(),\n      currentTab: 'toread' as ITab,\n      tags: new Set()\n   }\n\n\n   componentDidMount() {\n      // fetching books\n      fetch('./data/30000-items.json')\n         .then(response => response.json())\n         .then(data => {\n            data.items.forEach((book: IBook, index: number) => book.index = index)\n\n            // restoring moved(in progress or done) books ids from localstorage\n            const allBooks: IBook[] = data.items\n            if (!localStorage.getItem('movedBooks')) {\n               localStorage.setItem('movedBooks', '[]')\n            }\n            const movedBookIds: string[] = JSON.parse(localStorage.getItem('movedBooks') as string)\n            for (let movedId of movedBookIds) {\n               const book = allBooks.find(book => book.id === movedId)\n               if (book) book.moved = true\n            }\n\n            this.setState({ allBooks })\n         })\n\n      // getting tab and tags from searchparams\n      const newUrl = new URL(window.location.href)\n      newUrl.search = ''\n      const urlParams = new URLSearchParams(window.location.search);\n\n      const tab = urlParams.get('tab');\n      if (tab === 'toread' || tab === 'inprogress' || tab === 'done') {\n         newUrl.searchParams.set('tab', tab)\n         this.setState({ currentTab: tab })\n      }\n\n      const tags = urlParams.get('tags')\n      if (tags) {\n         newUrl.searchParams.set('tags', tags)\n         this.setState({ tags: new Set(tags.split(',')) })\n      }\n\n      window.history.pushState('', '', newUrl.toString())\n\n      // restoring in progress and done books from localstorage\n      if (!localStorage.getItem('booksInProgress')) {\n         localStorage.setItem('booksInProgress', '[]')\n      }\n      const storedBooksInProgress: string[] = JSON.parse(localStorage.getItem('booksInProgress') as string)\n      const booksInProgress: number[] = storedBooksInProgress.map(id => +id)\n      this.setState({ booksInProgressIds: new Set(booksInProgress) })\n\n      if (!localStorage.getItem('booksDone')) {\n         localStorage.setItem('booksDone', '[]')\n      }\n      const storedBooksDone: string[] = JSON.parse(localStorage.getItem('booksDone') as string)\n      const booksDone: number[] = storedBooksDone.map(id => +id)\n      this.setState({ booksDoneIds: new Set(booksDone) })\n   }\n\n\n   changeTab = (tab: ITab) => {\n      this.setState({ currentTab: tab })\n\n      const newUrl = new URL(window.location.href)\n      newUrl.searchParams.set('tab', tab)\n      window.history.pushState('', '', newUrl.toString())\n   }\n\n\n   addTag = (tag: string) => {\n      let tags = this.state.tags\n      tags.add(tag)\n      this.setState({ tags })\n\n      const newUrl = new URL(window.location.href)\n      newUrl.searchParams.set('tags', Array.from(tags).join(','))\n      window.history.pushState('', '', newUrl.toString())\n   }\n\n   removeTag = (tag: string) => {\n      let tags = this.state.tags\n      tags.delete(tag)\n      this.setState({ tags })\n\n      const newUrl = new URL(window.location.href)\n      newUrl.searchParams.set('tags', Array.from(tags).join(','))\n      window.history.pushState('', '', newUrl.toString())\n   }\n\n   clearTags = () => {\n      this.setState({ tags: new Set() })\n\n      const newUrl = new URL(window.location.href)\n      newUrl.searchParams.delete('tags')\n      window.history.pushState('', '', newUrl.toString())\n   }\n\n\n   startBook = (index: number) => {\n      const allBooks = this.state.allBooks\n      allBooks[index].moved = true\n      const movedBooks = allBooks.filter(book => book.moved)\n      const movedBooksIds = movedBooks.map(book => book.id)\n      localStorage.setItem('movedBooks', JSON.stringify(movedBooksIds))\n\n      const booksInProgressIds = this.state.booksInProgressIds\n      booksInProgressIds.add(index)\n      localStorage.setItem('booksInProgress', JSON.stringify(Array.from(booksInProgressIds)) )\n\n      this.setState({ allBooks, booksInProgressIds })\n   }\n\n   finishBook = (index: number) => {\n      const booksInProgressIds = this.state.booksInProgressIds\n      booksInProgressIds.delete(index)\n      localStorage.setItem('booksInProgress', JSON.stringify(Array.from(booksInProgressIds)) )\n\n      const booksDoneIds = this.state.booksDoneIds\n      booksDoneIds.add(index)\n      localStorage.setItem('booksDone', JSON.stringify(Array.from(booksDoneIds)) )\n\n      this.setState({ booksInProgressIds, booksDoneIds })\n   }\n\n   resetBook = (index: number) => {\n      const booksDoneIds = this.state.booksDoneIds\n      booksDoneIds.delete(index)\n      localStorage.setItem('booksDone', JSON.stringify(Array.from(booksDoneIds)) )\n\n      const allBooks = this.state.allBooks\n      allBooks[index].moved = false\n      const movedBooks = allBooks.filter(book => book.moved)\n      const movedBooksIds = movedBooks.map(book => book.id)\n      localStorage.setItem('movedBooks', JSON.stringify(movedBooksIds))\n\n      this.setState({ booksDoneIds, allBooks })\n   }\n\n\n   render() {\n      const { currentTab, allBooks, booksInProgressIds, booksDoneIds, tags } = this.state\n\n      const toReadCount = allBooks.filter((book) => !book.moved).length\n      const inProgressCount = booksInProgressIds.size\n      const doneCount = booksDoneIds.size\n\n      let moveBook = this.startBook\n      if (currentTab === 'inprogress') {\n         moveBook = this.finishBook\n      }\n      if (currentTab === 'done') {\n         moveBook = this.resetBook\n      }\n\n      return (\n         <div className=\"app\">\n            <Navbar\n               currentTab={currentTab}\n               changeTab={this.changeTab}\n               toRead={toReadCount}\n               inProgress={inProgressCount}\n               done={doneCount}\n            />\n            <Filter\n               tags={tags}\n               removeTag={this.removeTag}\n               clearTags={this.clearTags}\n            />\n            <Books\n               tab={currentTab}\n               books={allBooks}\n               tags={tags}\n               addTag={this.addTag}\n               moveBook={moveBook}\n               booksInProgressIds={booksInProgressIds}\n               booksDoneIds={booksDoneIds}\n            />\n         </div>\n      )\n   }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}